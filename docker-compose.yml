---
# pegbtech-demo application
version: '3'
services:

    # Pegbtech-demo nginx as web proxy
    pegb-proxy: 
        container_name: pegb-proxy
        image: nginx:1.17-alpine
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - "$PWD/pegb_web/pegb-proxy/nginx:/etc/nginx/conf.d"
            - "$PWD/pegb_web/pegb-certbot/conf:/etc/letsencrypt"
            - "$PWD/pegb_web/pegb-certbot/www:/var/www/certbot"

        # NGINX will reload its configuration every 6h
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        restart_policy:
            condition: on-failure
        networks:
            - pegbnet

    # Pegbtech-demo certbot for lets encrypt
    pegb-certbot:
        container_name: pegb-certbot
        image: certbot/certbot
        # ports: 
            # 
        volumes:
            - "$PWD/pegb_web/pegb-certbot/conf:/etc/letsencrypt"
            - "$PWD/pegb_web/pegb-certbot/www:/var/www/certbot"

        # Check if your certificate is up for renewal every 12 hours as recommended by Letâ€™s Encrypt.
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
        restart_policy:
            condition: on-failure
        networks:
            - pegbnet

    # Pegbtech-demo the application itself
    pegb-app:
        container_name: pegb-app
        image: pegb-app:latest
        environment: 
            - "HOST=0.0.0.0" # Webpack server will listen on all IPs
        ports:
            - "8080:8080"
            - "3030:3030"
        build:
            context: pegb_app
        restart_policy:
            condition: on-failure
        networks:
            - pegbnet

networks:
    pegbnet:
...
